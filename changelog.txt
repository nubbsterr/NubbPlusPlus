# Nubb++ changelog:

## Nubb++ 1.0 (08/13/2024)
- IF statements
- WHILE statements
- INPUT statements (only for integral values, no string input)
- Variable declarations with LET keyword
- Basic arithemtic/expressions
- GOTO and LABELs 
- Comments using #/Pound symbol

## Nubb++ 1.1 (08/14/2024)
- Logical operators (NOT not supported yet, AND/OR supported)
- Compile time statistic added measured in milliseconds for benchmarking

## Nubb++ 1.2 (08/16/2024)
- Boolean values (True, False, and None for NULL keyword)

## Nubb++ 1.3 (08/17/2024)
- ELIF/ELSE statements

## Nubb++ 1.4 (08/19/2024)
- Static Types (int, double, float, string and bool!)
- Revised LET and INPUT statements with static types (string inputs work now!)

##Nubb++ 1.4.1 (08/20/2024)
- Official bash script to build Nubb++ source files!

##Nubb++ 1.4.2 (08/22/2024)
- More comments in nubb++build to help people c:
- Fixed missing std::exit() call in compiler build

##Nubb++ 1.5 (08/23/2024)
- Type casting using custom 'CAST' statement (CAST ident: type)
- Type casting does NOT handle semantic errors, like casting a string to an int and vice-versa, getting type of cast ident. is too bothersome
- Added boolean hasTrailingIf to Parser component to verify IF statement structure, prevent illegal C++ syntax

##Nubb++ 1.6 (08/31/2024)
- FOR statements (similar syntax to C++) 
    - Limited only to integral types, no strings since strings cannot be indexed in Nubb++, and probably will never be available since that'd be too advanced for a dummy language like this
- Implemented '++', '--', '+=', and '-=' operators for better expressions support.
- Adjusted CAST statement syntax to use 'colon'/; rather than equal sign (see grammar.txt)

##Nubb++ 1.6.1 (09/01/2024)
- Adjusted input validation fix in Parser to only clear buffer and reset std::cin (cannot set a string input value to -1 lol)
- nubb++build script now deletes out.cpp once compilation is done (use the .exe file if you want to keep the original C++ file)
- Removed most instances of convertChartoString calls in Lexer to improve performance of Lexer
- Revamped abort() function in Lexer and Parser to use only 1 parameter (using string concatenation now)
- Removed and improved comments across codebase

##Nubb++ 2.0 (09/12/2024)
- Arrays implemented using std::vector
    - Can add/remove elements using ADD/POP statements (see grammar.txt for syntax)
        - ADD uses .push_back() from C++ and adds whatever element you're calling to the back of the array
        - POP uses .pop_back() from C++, so the element at the end of the array will be what gets removed. This may be tweaked in the future to allow deletion of elements at specific indices. 
    - Can print elements from explicit indices using regular PRINT statements with syntax: PRINT arr: 4 (arr = identifier, 4 = index)
- Arrays do NOT have type validation, meaning you can have strings and ints in an array, but your code will fail to compile with g++ since all data types in the array MUST be the same.

##Nubb++ 2.1 (10/07/2024)
- NOT operator implemented
    - Adjusted grammar rules to adhere to 1 or more expressions and '++'/'--' operators
- Added new 'Nubb++ Examples' folder with Nubb++ snippets. Will update over time given new capabilities.

##Nubb++ 2.2 (10/19/2024)
- Functions implemented with constant 'auto' type. I plan to include 'void' type functions sometime down the line.
    - A main function is now required for all Nubb++ programs to execute properly
        - This is due to newly implemented logic and that separating code between functions would increase the size and confusion of this compiler IMMENSELY.
    - All functions must return some sort of identifier or expression statement. See grammar.txt for syntax info.
- CALL keyword implemented to call other functions.
    - Do keep in mind about function scope, and that you must order function calls to be AFTER the declarationm, similar to C++.
- Revamped matchType() to use lexer's enum values since they weren't being used, and hard coded string literals are annoying and look stupid, even though they may actually be more performant xD
    - This has yet to be tested for edge cases but will be in future version updates.

##Nubb++ 3.0 (11/04/2024)
- All of the following suggestions are from u/nysra on reddit from r/cpp_questions, thanks :)
    - Created new src and CMakeLists file/folder to allow building from source, also for better building on development end
        - Basically a build system for the project
    - Added .gitignore to remove some extra files, mainly for testing behind the scenes
    - Updated README with better documentation and hyperlinks to various sources
- Line number added to error messages for better debugging (not yet tested in full).
- Implemented 'void' function type, see grammar.txt for syntax info.

##Nubb++ 3.1 (11/22/2024)
- Can now compare array index values to other expressions through the syntax: {array ident} ":" {array index} [comparison operator] {expression}, see example folder for more info.
- Discovered bug involving line count for errors, will need to fix this at some point; has yet to be tested.
- NOTE: This will be the last internal update to Nubb++ (for a while, probably). I plan to implement the below features then move on to other projects!

## Potential Features (TBD, Slight chance to not be implemented, last few features to add)
- AST/Astract Syntax Tree Representation (requires research since I have no clue what this is)
- Compiler optimizations (optimize code during compilation), "Lexical scope", MORE improvements to compile errors.
