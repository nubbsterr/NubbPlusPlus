# Nubb++ changelog:

## Nubb++ 1.0 (08/13/2024)
- IF statements
- WHILE statements
- INPUT statements (only for integral values, no string input)
- Variable declarations with LET keyword
- Basic arithemtic/expressions
- GOTO and LABELs 
- Comments using #/Pound symbol

## Nubb++ 1.1 (08/14/2024)
- Logical operators (NOT not supported yet, AND/OR supported)
- Compile time statistic added measured in milliseconds for benchmarking

## Nubb++ 1.2 (08/16/2024)
- Boolean values (True, False, and None for NULL keyword)

## Nubb++ 1.3 (08/17/2024)
- ELIF/ELSE statements

## Nubb++ 1.4 (08/19/2024)
- Static Types (int, double, float, string and bool!)
- Revised LET and INPUT statements with static types (string inputs work now!)

##Nubb++ 1.4.1 (08/20/2024)
- Official bash script to build Nubb++ source files!

##Nubb++ 1.4.2 (08/22/2024)
- More comments in nubb++build to help people c:
- Fixed missing std::exit() call in compiler build

##Nubb++ 1.5 (08/23/2024)
- Type casting using custom 'CAST' statement (CAST ident: type)
- Type casting does NOT handle semantic errors, like casting a string to an int and vice-versa, getting type of cast ident. is too bothersome
- Added boolean hasTrailingIf to Parser component to verify IF statement structure, prevent illegal C++ syntax

##Nubb++ 1.6 (08/31/2024)
- FOR statements (similar syntax to C++) 
    - Limited only to integral types, no strings since strings cannot be indexed in Nubb++, and probably will never be available since that'd be too advanced for a dummy language like this
- Implemented '++', '--', '+=', and '-=' operators for better expressions support.
- Adjusted CAST statement syntax to use 'colon'/; rather than equal sign (see grammar.txt)

##Nubb++ 1.6.1 (09/01/2024)
- Adjusted input validation fix in Parser to only clear buffer and reset std::cin (cannot set a string input value to -1 lol)
- nubb++build script now deletes out.cpp once compilation is done (use the .exe file if you want to keep the original C++ file)
- Removed most instances of convertChartoString calls in Lexer to improve performance of Lexer
- Revamped abort() function in Lexer and Parser to use only 1 parameter (using string concatenation now)
- Removed and improved comments across codebase

## Upcoming Features (TBD)
- NOT operator implementation
- Better error messages (line number/more descriptive messages making suggestions for changes!)
- Functions support (including return types support; int, double, float, string, and void)
- Arrays

## Potential Features (TBD, Slight chance to not be implemented)
- AST/Astract Syntax Tree Representation (requires research since I have no clue what this is)
- Syntax highlighting in VSC 
- FUll language installer built on Python Tkinter or C++ (install most recent compiler build from repo + bin command using nubb++build bash script)
